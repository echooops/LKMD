* 大流量情况下netlink接收错误问题定位
  ----------------- 谨慎使用skb_copy
** 问题现象
   内核层模块使用netlink_unicast发送数据，应用层程序使用recvmsg接收，小流量情况下没有问题，大流量情况下发现应用层接收到的数据有问题，在应用层处理时造成记录遗漏等错误。
** 定位过程
*** 问题环境
**** 应用层程序
     应用层程序使用recvmsg接收，且使用阻塞方式，接收包缓存大小为2M。
**** 内核层模块
     内核层将每个数据包传递到应用层，为防止数据传输次数过大，将多个数据包综合起来一起发送，由于netlink 每次发送都要申请skb，为防止频繁申请skb，使用了skb预分配方案，即预先分配好足够大的skb，在需要发送使用skb_clone，仅仅申请一个skb结构即可，skb指向的数据空间不需要再次分配，相关伪代码如下：
     #+BEGIN_SRC C
       /* 初始化部分，为每个cpu 分配一个大结构的skb */
       for_each_possible_cpu(cpu) {
           g_skb_maxlen[cpu] = NLMSG_SPACE(60000);
           g_skb[cpu] = alloc_skb(g_skb_maxlen[cpu], GFP_KERNEL);
           if (g_skb[cpu] == NULL) {
               NM_MSG_OUTPUT(NM_LEVEL_ERROR, "nm_send_user: failed to allock_skb\n");
               return -1;
           }
       }
       /* 报文上传部分，内容为buf  len，用户进程号user_proc.pid，省去了异常判断： */
       cpu = get_cpu();
       skb = skb_clone(g_skb[cpu], GFP_ATOMIC);
       nlh = NLMSG_PUT(skb, 0, 0, NLMSG_NOOP, len);
       memcpy(NLMSG_DATA(nlh), buf, len);
       NETLINK_CB(skb).dst_group = 0;
       ret = netlink_unicast(nlfd, skb, user_proc.pid, MSG_DONTWAIT);
     #+END_SRC
*** 调试
    将内核层上传的数据，和应用层接收的数据全部打印出来，进行对比，结果发现在大流量情况下，应用层接收可能出现错位情况，举例来说，内核处上传了三个大块包，使用netlink的序号机制，假设三个包的(序号,长度)分别是(1,10000), (2,20000),(3,30000)，但是在应用层接收后突然变成了(1,10000), (3,30000), (3,30000)，即序号为2的大块包消失了。
*** 具体原因
    最终确认是因为没有理解netlink的排队机制导致的问题。netlink上传消息时，不会复制任何数据，仅仅将skb入队列，以下举例来说明问题：
    - 假设内容处上传的第一个大块包为(1,10000)，上传后立即被应用层接收，此时接收的数据没有任何问题；
    - 第二个上传的大块包为(2,20000)，上传后应用层没来得及接收，而此刻第三个包(3,30000)已经进入netlink排队，由于第二、第三个包均使用了skb_clone，指向同一块数据区，因此第二个包原有的数据区被第三个覆盖了，所以应用层接收时会出现序号为2的包消失了，而序号为3的包接收到两次。
    - 这也解释了为什么只在大流量情况下才存在这种问题，只要应用层接收足够快，可以保证netlink队列中最多只有一个报文，那么就不会有错误。
** 解决方案
   如果netlink中的数据还没有被应用层接收，则不能使用skb_clone，必须申请一个全新的skb存储内容，因此报文上传部分如下修改，使用skb_cloned判断报文是否已经被应用层取走，然后再使用skb_clone或者alloc_skb组装需要上传的内容：
   #+BEGIN_SRC C
     cpu = get_cpu();
     if (skb_cloned(g_skb[cpu])) {
         skb = alloc_skb(NLMSG_SPACE(len), GFP_ATOMIC);
     }
     else {
         skb = skb_clone(g_skb[cpu], GFP_ATOMIC);
     }
     nlh = NLMSG_PUT(skb, 0, 0, NLMSG_NOOP, len);
     memcpy(NLMSG_DATA(nlh), buf, len);
     NETLINK_CB(skb).dst_group = 0;
     ret = netlink_unicast(nlfd, skb, user_proc.pid, MSG_DONTWAIT);
   #+END_SRC
